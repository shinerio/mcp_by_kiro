# MCP Base64 Server Docker Compose Configuration
# Provides different deployment scenarios for the MCP Base64 server

version: '3.8'

services:
  # Main MCP Base64 Server service
  mcp-base64-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-base64-server
    ports:
      - "${HTTP_API_PORT:-8080}:8080"    # HTTP API server
      - "${MCP_HTTP_PORT:-3000}:3000"    # MCP HTTP transport
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network

  # Development service with volume mounts for live development
  mcp-base64-server-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-base64-server-dev
    ports:
      - "${HTTP_API_PORT:-8080}:8080"
      - "${MCP_HTTP_PORT:-3000}:3000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=DEBUG
      - FLASK_ENV=development
    volumes:
      - .:/app
      - ./logs:/app/logs
    restart: unless-stopped
    command: ["python", "main.py", "--transport", "http", "--enable-http-server", "--log-level", "DEBUG"]
    networks:
      - mcp-network

  # Stdio-only service for MCP client integration
  mcp-base64-stdio:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-base64-stdio
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./logs:/app/logs
    restart: "no"  # Don't restart stdio service automatically
    stdin_open: true
    tty: true
    command: ["python", "main.py", "--transport", "stdio"]
    networks:
      - mcp-network

  # Nginx reverse proxy for production deployment
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html/static:ro
    depends_on:
      - mcp-base64-server
    restart: unless-stopped
    networks:
      - mcp-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - mcp-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - mcp-network

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deploy/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data: